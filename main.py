# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\mainpage.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import pandas as pd
import pickle
import os.path


class SaveWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Registration")
        self.formGroupBox = QGroupBox("Registration Info")

        self.usernameLineEdit = QLineEdit()
        self.passwordLineEdit = QLineEdit()
        self.websiteLineEdit = QLineEdit()
        self.nameLineEdit = QLineEdit()

        self.createForm()
        self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.saveregistration)
        self.buttonBox.rejected.connect(self.reject)

        mainLayout = QVBoxLayout()

        mainLayout.addWidget(self.formGroupBox)
        mainLayout.addWidget(self.buttonBox)
        self.setLayout(mainLayout)

    def createForm(self):
        layout = QFormLayout()
        layout.addRow(QLabel("Username:"), self.usernameLineEdit)
        layout.addRow(QLabel("Password:"), self.passwordLineEdit)
        layout.addRow(QLabel("Website:"), self.websiteLineEdit)
        layout.addRow(QLabel("Give it a name:"), self.nameLineEdit)
        self.formGroupBox.setLayout(layout)

    def saveregistration(self):
        """Save a dictionary."""
        # check whether the file exists
        if os.path.exists("database.pkl"):
            with open("database.pkl", "rb") as f:
                datadict = pickle.load(f)
        else:
            datadict = {}

        # check whether any entry is empty
        if (self.usernameLineEdit.text() != "" and
            self.passwordLineEdit.text() != "" and
            self.websiteLineEdit.text() != "" and
            self.nameLineEdit.text() != ""):

            newDict = {
                "username": self.usernameLineEdit.text(),
                "password": self.passwordLineEdit.text(),
                "website": self.websiteLineEdit.text(),
            }
            datadict[self.nameLineEdit.text()] = newDict

            with open('database.pkl', 'wb') as f:
                pickle.dump(datadict, f)

        else:
            self.show_warning_message_box()

        self.close()

    def show_warning_message_box(self):
        self.msg = QMessageBox()
        self.msg.setIcon(QMessageBox.Warning)
        self.msg.setText("您有未输入的信息，请重新输入")
        self.msg.setWindowTitle("注意")
        self.msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        retval = self.msg.exec_()


class LoadWindow(QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Python")
        self.setGeometry(100, 100, 300, 400)

        self.formGroupBox = QGroupBox("注册信息")
        self.nameLineEdit = QLineEdit()
        self.createForm()

        self.searchButton = QPushButton(self)
        self.searchButton.setText("搜索")
        self.searchButton.clicked.connect(self.search)

        # =============================
        self.listWidget = QListWidget(self)
        self.displayregistration()
        self.listWidget.itemDoubleClicked.connect(self.doubleClickInfo)

        # =============================
        self.buttonBox = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.deleteButton = self.buttonBox.addButton("Delete", QDialogButtonBox.ActionRole)
        self.deleteButton.clicked.connect(self.deleteEntry)
        self.buttonBox.accepted.connect(self.accept)
        self.buttonBox.rejected.connect(self.reject)

        # ==========================
        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.formGroupBox)
        mainLayout.addWidget(self.searchButton)
        mainLayout.addWidget(self.listWidget)
        mainLayout.addWidget(self.buttonBox)
        self.setLayout(mainLayout)

    def displayregistration(self):
        if os.path.exists("database.pkl"):
            with open("database.pkl", "rb") as f:
                datadict = pickle.load(f)

            for key in datadict.keys():
                QListWidgetItem(key, self.listWidget)

    def search(self):
        self.listWidget.clear()
        if os.path.exists("database.pkl"):
            with open("database.pkl", "rb") as f:
                datadict = pickle.load(f)

            if self.nameLineEdit.text() == "":
                for key in datadict.keys():
                    QListWidgetItem(key, self.listWidget)
            else:
                for key in datadict.keys():
                    if self.nameLineEdit.text().lower() in key.lower():
                        QListWidgetItem(key, self.listWidget)

    def doubleClickInfo(self, item):
        self.updatewindow = UpdateWindow(item)
        self.updatewindow.show()


    def deleteEntry(self):
        if os.path.exists("database.pkl"):
            with open("database.pkl", "rb") as f:
                datadict = pickle.load(f)

            datadict.pop(self.listWidget.currentItem().text())

            self.listWidget.clear()
            for key in datadict.keys():
                QListWidgetItem(key, self.listWidget)

            with open('database.pkl', 'wb') as f:
                pickle.dump(datadict, f)


    def createForm(self):
        # creating a form layout
        layout = QFormLayout()
        layout.addRow(QLabel("名称"), self.nameLineEdit)
        self.formGroupBox.setLayout(layout)


class UpdateWindow(QDialog):
    def __init__(self, item):
        super().__init__()

        self.item = item
        self.setWindowTitle("Update Window")
        self.setGeometry(100, 100, 300, 400)
        self.formGroupBox = QGroupBox("Form 1")
        self.usernameLineEdit = QLineEdit()
        self.passwordLineEdit = QLineEdit()
        self.websiteLineEdit = QLineEdit()
        self.nameLineEdit = QLineEdit()

        self.createForm(item)
        self.buttonBox = QDialogButtonBox(QDialogButtonBox.Save | QDialogButtonBox.Cancel)
        self.buttonBox.accepted.connect(self.update)
        self.buttonBox.rejected.connect(self.reject)

        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.formGroupBox)
        mainLayout.addWidget(self.buttonBox)
        self.setLayout(mainLayout)

    def update(self):
        if os.path.exists("database.pkl"):
            with open("database.pkl", "rb") as f:
                datadict = pickle.load(f)

            datadict[self.item.text()]["username"] = self.usernameLineEdit.text()
            datadict[self.item.text()]["password"] = self.passwordLineEdit.text()
            datadict[self.item.text()]["website"] = self.websiteLineEdit.text()

            with open("database.pkl", "wb") as f:
                pickle.dump(datadict, f)

        self.close()

    def createForm(self, item):
        layout = QFormLayout()
        layout.addRow(QLabel("Username:"), self.usernameLineEdit)
        layout.addRow(QLabel("Password:"), self.passwordLineEdit)
        layout.addRow(QLabel("Website:"), self.websiteLineEdit)

        if os.path.exists("database.pkl"):
            with open("database.pkl", "rb") as f:
                datadict = pickle.load(f)

            self.usernameLineEdit.setText(datadict[item.text()]["username"])
            self.passwordLineEdit.setText(datadict[item.text()]["password"])
            self.websiteLineEdit.setText(datadict[item.text()]["website"])

        self.formGroupBox.setLayout(layout)


class Window(QMainWindow):
    def __init__(self):
        super(Window, self).__init__()
        self.top = 200
        self.left = 200
        self.width = 600
        self.height = 500
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Password Manager")
        self.setGeometry(self.top, self.left, self.width, self.height)

        self.saveButton = QPushButton(self)
        self.saveButton.setGeometry(QtCore.QRect(90, 230, 200, 60))
        self.saveButton.setObjectName("saveButton")
        self.saveButton.setText("Save")
        self.saveButton.clicked.connect(self.save)

        self.loadButton = QPushButton(self)
        self.loadButton.setGeometry(QtCore.QRect(310, 230, 200, 60))
        self.loadButton.setObjectName("loadButton")
        self.loadButton.setText("Load")
        self.loadButton.clicked.connect(self.load)

        self.label = QLabel(self)
        self.label.setGeometry(QRect(90, 140, 421, 71))
        font = QFont()
        font.setPointSize(20)
        self.label.setFont(font)
        self.label.setLayoutDirection(Qt.LeftToRight)
        self.label.setAlignment(Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label.setText("Welcome to Password Manager!")

    def save(self):
        self.savewindow = SaveWindow()
        self.savewindow.setGeometry(QRect(400, 400, 400, 200))
        self.savewindow.show()

    def load(self):
        """Open the dictionary"""
        self.loadwindow = LoadWindow()
        self.loadwindow.setGeometry(QRect(400, 400, 400, 200))
        self.loadwindow.show()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    mainwindow = Window()
    mainwindow.show()
    sys.exit(app.exec_())
